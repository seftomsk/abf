// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/seftomsk/abf/access (interfaces: IStorage)

// Package access_test is a generated GoMock package.
package access_test

import (
	context "context"
	"github.com/seftomsk/abf/interval/access/storage"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIStorage is a mock of IStorage interface.
type MockIStorage struct {
	ctrl     *gomock.Controller
	recorder *MockIStorageMockRecorder
}

// MockIStorageMockRecorder is the mock recorder for MockIStorage.
type MockIStorageMockRecorder struct {
	mock *MockIStorage
}

// NewMockIStorage creates a new mock instance.
func NewMockIStorage(ctrl *gomock.Controller) *MockIStorage {
	mock := &MockIStorage{ctrl: ctrl}
	mock.recorder = &MockIStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIStorage) EXPECT() *MockIStorageMockRecorder {
	return m.recorder
}

// AddToBList mocks base method.
func (m *MockIStorage) AddToBList(arg0 context.Context, arg1 storage.IPEntity) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddToBList", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddToBList indicates an expected call of AddToBList.
func (mr *MockIStorageMockRecorder) AddToBList(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddToBList", reflect.TypeOf((*MockIStorage)(nil).AddToBList), arg0, arg1)
}

// AddToWList mocks base method.
func (m *MockIStorage) AddToWList(arg0 context.Context, arg1 storage.IPEntity) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddToWList", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddToWList indicates an expected call of AddToWList.
func (mr *MockIStorageMockRecorder) AddToWList(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddToWList", reflect.TypeOf((*MockIStorage)(nil).AddToWList), arg0, arg1)
}

// DeleteFromBlackList mocks base method.
func (m *MockIStorage) DeleteFromBlackList(arg0 context.Context, arg1 storage.IPEntity) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFromBlackList", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFromBlackList indicates an expected call of DeleteFromBlackList.
func (mr *MockIStorageMockRecorder) DeleteFromBList(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFromBlackList", reflect.TypeOf((*MockIStorage)(nil).DeleteFromBlackList), arg0, arg1)
}

// DeleteFromWhiteList mocks base method.
func (m *MockIStorage) DeleteFromWhiteList(arg0 context.Context, arg1 storage.IPEntity) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFromWhiteList", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFromWhiteList indicates an expected call of DeleteFromWhiteList.
func (mr *MockIStorageMockRecorder) DeleteFromWList(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFromWhiteList", reflect.TypeOf((*MockIStorage)(nil).DeleteFromWhiteList), arg0, arg1)
}

// IsInBList mocks base method.
func (m *MockIStorage) IsInBList(arg0 context.Context, arg1 storage.IPEntity) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsInBList", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsInBList indicates an expected call of IsInBList.
func (mr *MockIStorageMockRecorder) IsInBList(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsInBList", reflect.TypeOf((*MockIStorage)(nil).IsInBList), arg0, arg1)
}

// IsInWList mocks base method.
func (m *MockIStorage) IsInWList(arg0 context.Context, arg1 storage.IPEntity) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsInWList", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsInWList indicates an expected call of IsInWList.
func (mr *MockIStorageMockRecorder) IsInWList(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsInWList", reflect.TypeOf((*MockIStorage)(nil).IsInWList), arg0, arg1)
}
